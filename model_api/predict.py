import pandas as pd
import lightgbm as lgb
from fastapi import FastAPI
import os
from pydantic import BaseModel


# helpful prints for debugging
print(f'------\npwd:\n{os.getcwd()}')
print(f'------\nList current dir:\n{os.listdir()}')
print(f'------\nList /app/models dir:\n{os.listdir("/app/models")}')

# Load the trained model from disk
model_path = os.environ.get("MODEL_FILE_PATH")
model = lgb.Booster(model_file=model_path)

# Create a FastAPI app instance
app = FastAPI()

# Define the input schema for the API
class InputData(BaseModel):
    feature1: float
    feature2: float
    feature3: float

# Define a route to handle predictions
@app.post('/predict')
async def predict(data: InputData):
    
    """
    Accepts input data in the form of a FastAPI InputData object, which contains a dictionary of input features.
    Uses a trained LightGBM regression model to generate a prediction based on the input data. 
    Returns the prediction as a dictionary in the format {'prediction': value}.

    Args:
        data (InputData): A FastAPI InputData object containing a dictionary of input features.

    Returns:
        dict: A dictionary containing the prediction generated by the model in the format {'prediction': value}.
    """
    # Convert the input data to a DataFrame
    input_df = pd.DataFrame([data.dict()])

    # Generate a prediction using the trained model
    prediction = model.predict(input_df)[0]

    # Return the prediction as a dictionary
    return {'prediction': prediction}

# Run the app
if __name__ == '__main__':
    uvicorn.run(app, host='127.0.0.1', port=8000)
